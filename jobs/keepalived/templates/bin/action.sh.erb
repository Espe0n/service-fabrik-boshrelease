#!/bin/bash

STATE=$1
iaas_name='<%= p('ha.provider.name', nil) %>'
if [[ "$iaas_name" == "aws" ]]; then

  SUBNET_ID='<%= spec.networks.sf_service_fabrik_broker.cloud_properties.subnet %>'
  SOURCE_IP=<%= spec.ip %>
  <% internal = link("broker").p('internal') %>

  IAAS_CONFIG='<%= JSON.dump(p('ha.provider', nil)) %>'
  AWS_CLI_CMD=/var/vcap/packages/aws-cli/bin/aws
  JQ_CMD=/var/vcap/packages/jq/bin/jq

  ACCESS_KEY_ID="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.keyId')"
  SECRET_ACCESS_KEY="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.key')"
  REGION_NAME="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.region')"

  $AWS_CLI_CMD configure set aws_access_key_id "$ACCESS_KEY_ID"
  $AWS_CLI_CMD configure set aws_secret_access_key "$SECRET_ACCESS_KEY"
  $AWS_CLI_CMD configure set region "$REGION_NAME"

  if [[ "$STATE" == "MASTER" ]]; then
    network_metadata=$("$AWS_CLI_CMD" ec2 describe-network-interfaces --filter "Name=private-ip-address,Values=${SOURCE_IP}" | "${JQ_CMD}" -r --arg SUBNET_ID "$SUBNET_ID" '.[][] | select(.SubnetId==$SUBNET_ID)')
    export ENI_ID=$(echo "$network_metadata" | "${JQ_CMD}" -r '.NetworkInterfaceId')
    $AWS_CLI_CMD ec2 assign-private-ip-addresses --network-interface-id $ENI_ID --allow-reassignment --private-ip-addresses <%= internal['ip'] %>
    set +e
    sudo ip addr add <%= internal['ip'] %> dev eth0
    set -e
  elif [[ "$STATE" == "BACKUP" ]] || [[ "$STATE" == "FAULT" ]]; then
    set +e
    sudo ip addr del <%= internal['ip'] %>/32 dev eth0
    set -e
  fi
fi
exit 0
